import 'byte.grm' as bytelib;   # copy this file from grammars/byte.grm
Letter = bytelib.kAlpha;        # kAlpha is defined in byte.grm
Sigma = Letter | "'";           # alphabet also includes stress mark
Vowel = "a" | "e" | "i" | "o" | "u" | "A" | "E" | "I" | "O" | "U";
Consonant = Letter - Vowel;
Nucleus = Vowel+;

AllChars = bytelib.kBytes;

## new code

SigmaStar = (Sigma | "#")*;

# handles 1: inserts # before nuclei and at the beginning of the word
export FindNuclei = ("":"#") (Consonant* (("":"#")|("'":"'")) Nucleus Consonant+)* Consonant* ((("":"#")|("'":"'")) Nucleus)? Consonant*;

# handles 2: left context = # followed by letters means that last syllable was not stressed
export LastSyllableNotStressed = "#" Letter*;

# handles 3: right context = nucleus + consonants + # means the next syllable is not stressed
export NextSyllableUnstressed = (Nucleus Consonant* "#" SigmaStar);

# removes extraneous # from word after inserting proper amount of stress markers
export RemovePounds = CDRewrite["#":"", SigmaStar, SigmaStar, SigmaStar, 'sim', 'obl'];

# the CDRewrite equation for Stress (replaces # with ' when conditions 1-3 are satisfied)
export StressRewrite = CDRewrite["#":"'", LastSyllableNotStressed, NextSyllableUnstressed, SigmaStar, 'ltr', 'obl'];

# handles 4: the case where the word is only one syllable, which should be stressed
export OneSyllableStress = (Consonant* ("":"'") "'"? Nucleus Consonant*) | Consonant* "'"? Nucleus Consonant* "'"? Nucleus SigmaStar;

# composition of all the relevant FSTs
export Stress = Optimize[FindNuclei @ StressRewrite @ RemovePounds @ OneSyllableStress];

export StressBackwards = Invert[Stress];


export StressWords = CDRewrite[Stress, "[BOS]" | (AllChars - Sigma)+, "[EOS]" | (AllChars - Sigma)+, AllChars*, 'ltr', 'obl'];