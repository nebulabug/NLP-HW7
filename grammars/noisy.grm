import 'grammars/byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)

RandomChar = bytelib.kGraph <4.54>;
export RandomWord = Optimize[(RandomChar (RandomChar <0.1>)*) <2.3>];
SpellOOV = "<unk>".vocab:RandomWord;

export Spell = StringFile['entrain.alpha', vocab, byte] | SpellOOV;

#export SpellTen = StringFile['entrain.alpha', vocab, byte];

#export CompleteWord = Optimize[(ByteSigmaStar ("":ByteSigmaStar) @ Project[SpellTen, 'output']) @ Invert[SpellTen] @ LM];

#export RemoveSpace = Optimize[" ".byte:"".vocab];

#export CompleteWordInContext = Optimize[(Invert[SpellTen] RemoveSpace)* (((ByteSigma - "")+ ("":ByteSigmaStar) @ Project[SpellTen, 'output']) @ Invert[SpellTen])];

#export GetLastWord = (Project[SpellTen, 'input']:"".vocab)* Project[SpellTen, 'input'];

#export DelSpaces = CDRewrite[bytelib.kSpace:"", ByteSigmaStar, ByteSigmaStar, ByteSigmaStar, 'sim', 'obl'];

export DelSomeSpaces = CDRewrite[bytelib.kSpace:"", ByteSigmaStar, ByteSigmaStar, ByteSigmaStar, 'sim', 'opt'];

export OutputSpace = "".vocab:" ".byte;

export SpellText = (Spell OutputSpace)* Spell;

#export Generate = LM @ SpellText @ DelSpaces;

export InvLM = Invert[LM];

export InvSpellText = Invert[SpellText];

#export InvDelSpaces = Invert[DelSpaces];

export InvDelSomeSpaces = Invert[DelSomeSpaces];

export SpellUnk = (StringFile['entrain.alpha', vocab, byte] | ("<unk>".vocab:"<unk>".byte));

export PrintText = (SpellUnk OutputSpace)* SpellUnk;

