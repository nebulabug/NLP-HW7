Zero = "0";
One = "1";
Bit = Zero | One;
export First = Optimize[Zero Zero* Bit* One One One One?];
export Second = Optimize[Zero Bit* One One One];
export Disagreements = Optimize[ (First - Second) | (Second - First) ];

PreTriplets = Zero*;
NonFinalTriplet = One One One+ Zero+;
FinalTriplet = One One One+;
export Triplets = Optimize[PreTriplets NonFinalTriplet* FinalTriplet?];

BinaryString = Bit*;
Pillar = One One;
Pillars = Pillar*;
export NotPillars = Optimize[BinaryString - Pillars];

PreOddlets = Zero*;
NonFinalOddlet = One (One One)* Zero+;
FinalOddlet = One (One One)*;
export Oddlets = Optimize[PreOddlets NonFinalOddlet* FinalOddlet?];

