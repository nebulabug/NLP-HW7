Zero = "0";
One = "1";
Bit = Zero | One;
export First = Optimize[Zero Zero* Bit* One One One One?];
export Second = Optimize[Zero Bit* One One One];
export Disagreements = Optimize[ (First - Second) | (Second - First) ];

PreTriplets = Zero*;
NonFinalTriplet = One One One+ Zero+;
FinalTriplet = One One One+;
export Triplets = Optimize[PreTriplets NonFinalTriplet* FinalTriplet?];

BinaryString = Bit*;
Pillar = One One;
Pillars = Pillar*;
export NotPillars = Optimize[BinaryString - Pillars];

PreOddlets = Zero*;
NonFinalOddlet = One (One One)* Zero+;
FinalOddlet = One (One One)*;
export Oddlets = Optimize[PreOddlets NonFinalOddlet* FinalOddlet?];

export WFlip = ((Zero: One <2>) | (Zero: Zero <1>)) ((Zero: Zero One <0.5>) | (One: Zero <0.4>))+ (One <0.5>);

export WeightedMultipath = ((Zero: One <0.5>) (Zero: "" <0.6>)) | ((Zero: "" <0.2>) (Zero: One <0.1>));

export WeightedMultipathOpt = Optimize[WeightedMultipath];

export T = WeightedMultipathOpt;

x = Zero Zero;
y = One;

export T_out = Project[ T, 'output'];
export xT_out = Project[ x @ T, 'output'];
export Ty_in = Project[ T @ y, 'input'];
export xTy = x @ T @ y;
export exTye = ("":x) @ T @ (y:"");
export xT_out_opt = Optimize[xT_out];
export Ty_in_opt = Optimize[Ty_in];
export exTye_opt = Optimize[exTye];